
export const loadMarkdownFile = async (filePath: string): Promise<string[]> => {
  try {
    const response = await fetch(filePath);
    if (!response.ok) {
      throw new Error(`Failed to load ${filePath}`);
    }
    const text = await response.text();
    return parseMarkdownToLines(text);
  } catch (error) {
    console.error('Error loading markdown file:', error);
    return ['–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'];
  }
};

const parseMarkdownToLines = (markdown: string): string[] => {
  const lines = markdown.split('\n');
  const result: string[] = [];
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    if (!trimmedLine) {
      result.push('');
      continue;
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–∞–Ω–∏–∏ (H1)
    if (trimmedLine.startsWith('# ')) {
      result.push(`üìç ${trimmedLine.substring(2)}`);
      continue;
    }
    
    // –î–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–∏–æ–¥ (H2)
    if (trimmedLine.startsWith('## ')) {
      result.push(`üë§ ${trimmedLine.substring(3)}`);
      result.push('');
      continue;
    }
    
    // –°–µ–∫—Ü–∏—è (H3)
    if (trimmedLine.startsWith('### ')) {
      result.push(`‚ñ∂ ${trimmedLine.substring(4)}:`);
      continue;
    }
    
    // –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
    if (trimmedLine.startsWith('- ')) {
      result.push(`  ‚Ä¢ ${trimmedLine.substring(2)}`);
      continue;
    }
    
    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    result.push(trimmedLine);
  }
  
  return result;
};
